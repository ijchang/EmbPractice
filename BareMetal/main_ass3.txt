
main.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <main>:

/* Each task has its own TCB */
TCB_t user_tasks[MAX_TASKS];

int main(void)
{
   0:	b580      	push	{r7, lr}
   2:	af00      	add	r7, sp, #0

	enable_processor_faults();
   4:	f7ff fffe 	bl	24c <enable_processor_faults>

	init_scheduler_stack(SCHED_STACK_START);
   8:	4807      	ldr	r0, [pc, #28]	; (28 <main+0x28>)
   a:	f7ff fffe 	bl	128 <init_scheduler_stack>

	init_tasks_stack();
   e:	f7ff fffe 	bl	132 <init_tasks_stack>

	led_init_all();
  12:	f7ff fffe 	bl	0 <led_init_all>

	init_systick_timer(TICK_HZ);
  16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  1a:	f7ff fffe 	bl	c0 <init_systick_timer>

	switch_sp_to_psp();
  1e:	f7ff fffe 	bl	358 <switch_sp_to_psp>

	task1_handler();
  22:	f7ff fffe 	bl	32 <task1_handler>

	for(;;);
  26:	e7fe      	b.n	26 <main+0x26>
  28:	2001ec00 	.word	0x2001ec00

0000002c <idle_task>:
}


void idle_task(void)
{
  2c:	b480      	push	{r7}
  2e:	af00      	add	r7, sp, #0
	while(1);
  30:	e7fe      	b.n	30 <idle_task+0x4>

00000032 <task1_handler>:
}


void task1_handler(void)
{
  32:	b580      	push	{r7, lr}
  34:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_GREEN);
  36:	200c      	movs	r0, #12
  38:	f7ff fffe 	bl	0 <led_on>
		delay(DELAY_COUNT_1S);
  3c:	4804      	ldr	r0, [pc, #16]	; (50 <task1_handler+0x1e>)
  3e:	f7ff fffe 	bl	0 <delay>
		led_off(LED_GREEN);
  42:	200c      	movs	r0, #12
  44:	f7ff fffe 	bl	0 <led_off>
		delay(DELAY_COUNT_1S);
  48:	4801      	ldr	r0, [pc, #4]	; (50 <task1_handler+0x1e>)
  4a:	f7ff fffe 	bl	0 <delay>
		led_on(LED_GREEN);
  4e:	e7f2      	b.n	36 <task1_handler+0x4>
  50:	001312d0 	.word	0x001312d0

00000054 <task2_handler>:
	}

}

void task2_handler(void)
{
  54:	b580      	push	{r7, lr}
  56:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_ORANGE);
  58:	200d      	movs	r0, #13
  5a:	f7ff fffe 	bl	0 <led_on>
		delay(DELAY_COUNT_500MS);
  5e:	4805      	ldr	r0, [pc, #20]	; (74 <task2_handler+0x20>)
  60:	f7ff fffe 	bl	0 <delay>
		led_off(LED_ORANGE);
  64:	200d      	movs	r0, #13
  66:	f7ff fffe 	bl	0 <led_off>
		delay(DELAY_COUNT_500MS);
  6a:	4802      	ldr	r0, [pc, #8]	; (74 <task2_handler+0x20>)
  6c:	f7ff fffe 	bl	0 <delay>
		led_on(LED_ORANGE);
  70:	e7f2      	b.n	58 <task2_handler+0x4>
  72:	bf00      	nop
  74:	00098968 	.word	0x00098968

00000078 <task3_handler>:
	}

}

void task3_handler(void)
{
  78:	b580      	push	{r7, lr}
  7a:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_BLUE);
  7c:	200f      	movs	r0, #15
  7e:	f7ff fffe 	bl	0 <led_on>
		delay(DELAY_COUNT_250MS);
  82:	4805      	ldr	r0, [pc, #20]	; (98 <task3_handler+0x20>)
  84:	f7ff fffe 	bl	0 <delay>
		led_off(LED_BLUE);
  88:	200f      	movs	r0, #15
  8a:	f7ff fffe 	bl	0 <led_off>
		delay(DELAY_COUNT_250MS);
  8e:	4802      	ldr	r0, [pc, #8]	; (98 <task3_handler+0x20>)
  90:	f7ff fffe 	bl	0 <delay>
		led_on(LED_BLUE);
  94:	e7f2      	b.n	7c <task3_handler+0x4>
  96:	bf00      	nop
  98:	0004c4b4 	.word	0x0004c4b4

0000009c <task4_handler>:

}

void task4_handler(void)

{
  9c:	b580      	push	{r7, lr}
  9e:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_RED);
  a0:	200e      	movs	r0, #14
  a2:	f7ff fffe 	bl	0 <led_on>
		delay(DELAY_COUNT_125MS);
  a6:	4805      	ldr	r0, [pc, #20]	; (bc <task4_handler+0x20>)
  a8:	f7ff fffe 	bl	0 <delay>
		led_off(LED_RED);
  ac:	200e      	movs	r0, #14
  ae:	f7ff fffe 	bl	0 <led_off>
		delay(DELAY_COUNT_125MS);
  b2:	4802      	ldr	r0, [pc, #8]	; (bc <task4_handler+0x20>)
  b4:	f7ff fffe 	bl	0 <delay>
		led_on(LED_RED);
  b8:	e7f2      	b.n	a0 <task4_handler+0x4>
  ba:	bf00      	nop
  bc:	0002625a 	.word	0x0002625a

000000c0 <init_systick_timer>:

}


void init_systick_timer(uint32_t tick_hz)
{
  c0:	b480      	push	{r7}
  c2:	b087      	sub	sp, #28
  c4:	af00      	add	r7, sp, #0
  c6:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
  c8:	4b14      	ldr	r3, [pc, #80]	; (11c <init_systick_timer+0x5c>)
  ca:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
  cc:	4b14      	ldr	r3, [pc, #80]	; (120 <init_systick_timer+0x60>)
  ce:	613b      	str	r3, [r7, #16]

    /* calculation of reload value */
    uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz)-1;
  d0:	4a14      	ldr	r2, [pc, #80]	; (124 <init_systick_timer+0x64>)
  d2:	687b      	ldr	r3, [r7, #4]
  d4:	fbb2 f3f3 	udiv	r3, r2, r3
  d8:	3b01      	subs	r3, #1
  da:	60fb      	str	r3, [r7, #12]

    //Clear the value of SVR
    *pSRVR &= ~(0x00FFFFFFFF);
  dc:	697b      	ldr	r3, [r7, #20]
  de:	2200      	movs	r2, #0
  e0:	601a      	str	r2, [r3, #0]

    //load the value in to SVR
    *pSRVR |= count_value;
  e2:	697b      	ldr	r3, [r7, #20]
  e4:	681a      	ldr	r2, [r3, #0]
  e6:	68fb      	ldr	r3, [r7, #12]
  e8:	431a      	orrs	r2, r3
  ea:	697b      	ldr	r3, [r7, #20]
  ec:	601a      	str	r2, [r3, #0]

    //do some settings
    *pSCSR |= ( 1 << 1); //Enables SysTick exception request:
  ee:	693b      	ldr	r3, [r7, #16]
  f0:	681b      	ldr	r3, [r3, #0]
  f2:	f043 0202 	orr.w	r2, r3, #2
  f6:	693b      	ldr	r3, [r7, #16]
  f8:	601a      	str	r2, [r3, #0]
    *pSCSR |= ( 1 << 2);  //Indicates the clock source, processor clock source
  fa:	693b      	ldr	r3, [r7, #16]
  fc:	681b      	ldr	r3, [r3, #0]
  fe:	f043 0204 	orr.w	r2, r3, #4
 102:	693b      	ldr	r3, [r7, #16]
 104:	601a      	str	r2, [r3, #0]

    //enable the systick
    *pSCSR |= ( 1 << 0); //enables the counter
 106:	693b      	ldr	r3, [r7, #16]
 108:	681b      	ldr	r3, [r3, #0]
 10a:	f043 0201 	orr.w	r2, r3, #1
 10e:	693b      	ldr	r3, [r7, #16]
 110:	601a      	str	r2, [r3, #0]

}
 112:	bf00      	nop
 114:	371c      	adds	r7, #28
 116:	46bd      	mov	sp, r7
 118:	bc80      	pop	{r7}
 11a:	4770      	bx	lr
 11c:	e000e014 	.word	0xe000e014
 120:	e000e010 	.word	0xe000e010
 124:	00f42400 	.word	0x00f42400

00000128 <init_scheduler_stack>:


__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack)
{
 128:	4603      	mov	r3, r0
     __asm volatile("MSR MSP,%0": :  "r" (sched_top_of_stack)  :   );
 12a:	f383 8808 	msr	MSP, r3
     __asm volatile("BX LR");
 12e:	4770      	bx	lr

}
 130:	bf00      	nop

00000132 <init_tasks_stack>:


/* this function stores dummy stack contents for each task */

void init_tasks_stack(void)
{
 132:	b480      	push	{r7}
 134:	b085      	sub	sp, #20
 136:	af00      	add	r7, sp, #0

	user_tasks[0].current_state = TASK_READY_STATE;
 138:	4b39      	ldr	r3, [pc, #228]	; (220 <init_tasks_stack+0xee>)
 13a:	2200      	movs	r2, #0
 13c:	721a      	strb	r2, [r3, #8]
	user_tasks[1].current_state = TASK_READY_STATE;
 13e:	4b38      	ldr	r3, [pc, #224]	; (220 <init_tasks_stack+0xee>)
 140:	2200      	movs	r2, #0
 142:	761a      	strb	r2, [r3, #24]
	user_tasks[2].current_state = TASK_READY_STATE;
 144:	4b36      	ldr	r3, [pc, #216]	; (220 <init_tasks_stack+0xee>)
 146:	2200      	movs	r2, #0
 148:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	user_tasks[3].current_state = TASK_READY_STATE;
 14c:	4b34      	ldr	r3, [pc, #208]	; (220 <init_tasks_stack+0xee>)
 14e:	2200      	movs	r2, #0
 150:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	user_tasks[4].current_state = TASK_READY_STATE;
 154:	4b32      	ldr	r3, [pc, #200]	; (220 <init_tasks_stack+0xee>)
 156:	2200      	movs	r2, #0
 158:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	user_tasks[0].psp_value = IDLE_STACK_START;
 15c:	4b30      	ldr	r3, [pc, #192]	; (220 <init_tasks_stack+0xee>)
 15e:	4a31      	ldr	r2, [pc, #196]	; (224 <init_tasks_stack+0xf2>)
 160:	601a      	str	r2, [r3, #0]
	user_tasks[1].psp_value = T1_STACK_START;
 162:	4b2f      	ldr	r3, [pc, #188]	; (220 <init_tasks_stack+0xee>)
 164:	4a30      	ldr	r2, [pc, #192]	; (228 <init_tasks_stack+0xf6>)
 166:	611a      	str	r2, [r3, #16]
	user_tasks[2].psp_value = T2_STACK_START;
 168:	4b2d      	ldr	r3, [pc, #180]	; (220 <init_tasks_stack+0xee>)
 16a:	4a30      	ldr	r2, [pc, #192]	; (22c <init_tasks_stack+0xfa>)
 16c:	621a      	str	r2, [r3, #32]
	user_tasks[3].psp_value = T3_STACK_START;
 16e:	4b2c      	ldr	r3, [pc, #176]	; (220 <init_tasks_stack+0xee>)
 170:	4a2f      	ldr	r2, [pc, #188]	; (230 <init_tasks_stack+0xfe>)
 172:	631a      	str	r2, [r3, #48]	; 0x30
	user_tasks[4].psp_value = T4_STACK_START;
 174:	4b2a      	ldr	r3, [pc, #168]	; (220 <init_tasks_stack+0xee>)
 176:	4a2f      	ldr	r2, [pc, #188]	; (234 <init_tasks_stack+0x102>)
 178:	641a      	str	r2, [r3, #64]	; 0x40

	user_tasks[0].task_handler = idle_task;
 17a:	4b29      	ldr	r3, [pc, #164]	; (220 <init_tasks_stack+0xee>)
 17c:	4a2e      	ldr	r2, [pc, #184]	; (238 <init_tasks_stack+0x106>)
 17e:	60da      	str	r2, [r3, #12]
	user_tasks[1].task_handler = task1_handler;
 180:	4b27      	ldr	r3, [pc, #156]	; (220 <init_tasks_stack+0xee>)
 182:	4a2e      	ldr	r2, [pc, #184]	; (23c <init_tasks_stack+0x10a>)
 184:	61da      	str	r2, [r3, #28]
	user_tasks[2].task_handler = task2_handler;
 186:	4b26      	ldr	r3, [pc, #152]	; (220 <init_tasks_stack+0xee>)
 188:	4a2d      	ldr	r2, [pc, #180]	; (240 <init_tasks_stack+0x10e>)
 18a:	62da      	str	r2, [r3, #44]	; 0x2c
	user_tasks[3].task_handler = task3_handler;
 18c:	4b24      	ldr	r3, [pc, #144]	; (220 <init_tasks_stack+0xee>)
 18e:	4a2d      	ldr	r2, [pc, #180]	; (244 <init_tasks_stack+0x112>)
 190:	63da      	str	r2, [r3, #60]	; 0x3c
	user_tasks[4].task_handler = task4_handler;
 192:	4b23      	ldr	r3, [pc, #140]	; (220 <init_tasks_stack+0xee>)
 194:	4a2c      	ldr	r2, [pc, #176]	; (248 <init_tasks_stack+0x116>)
 196:	64da      	str	r2, [r3, #76]	; 0x4c


	uint32_t *pPSP;

	for(int i = 0 ; i < MAX_TASKS ;i++)
 198:	2300      	movs	r3, #0
 19a:	60bb      	str	r3, [r7, #8]
 19c:	e037      	b.n	20e <init_tasks_stack+0xdc>
	{
		pPSP = (uint32_t*) user_tasks[i].psp_value;
 19e:	4a20      	ldr	r2, [pc, #128]	; (220 <init_tasks_stack+0xee>)
 1a0:	68bb      	ldr	r3, [r7, #8]
 1a2:	011b      	lsls	r3, r3, #4
 1a4:	4413      	add	r3, r2
 1a6:	681b      	ldr	r3, [r3, #0]
 1a8:	60fb      	str	r3, [r7, #12]

		pPSP--;
 1aa:	68fb      	ldr	r3, [r7, #12]
 1ac:	3b04      	subs	r3, #4
 1ae:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR;//0x01000000
 1b0:	68fb      	ldr	r3, [r7, #12]
 1b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 1b6:	601a      	str	r2, [r3, #0]

		pPSP--; //PC
 1b8:	68fb      	ldr	r3, [r7, #12]
 1ba:	3b04      	subs	r3, #4
 1bc:	60fb      	str	r3, [r7, #12]
		*pPSP = (uint32_t) user_tasks[i].task_handler;
 1be:	4a18      	ldr	r2, [pc, #96]	; (220 <init_tasks_stack+0xee>)
 1c0:	68bb      	ldr	r3, [r7, #8]
 1c2:	011b      	lsls	r3, r3, #4
 1c4:	4413      	add	r3, r2
 1c6:	330c      	adds	r3, #12
 1c8:	681b      	ldr	r3, [r3, #0]
 1ca:	461a      	mov	r2, r3
 1cc:	68fb      	ldr	r3, [r7, #12]
 1ce:	601a      	str	r2, [r3, #0]

		pPSP--; //LR
 1d0:	68fb      	ldr	r3, [r7, #12]
 1d2:	3b04      	subs	r3, #4
 1d4:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;
 1d6:	68fb      	ldr	r3, [r7, #12]
 1d8:	f06f 0202 	mvn.w	r2, #2
 1dc:	601a      	str	r2, [r3, #0]

		for(int j = 0 ; j < 13 ; j++)
 1de:	2300      	movs	r3, #0
 1e0:	607b      	str	r3, [r7, #4]
 1e2:	e008      	b.n	1f6 <init_tasks_stack+0xc4>
		{
			pPSP--;
 1e4:	68fb      	ldr	r3, [r7, #12]
 1e6:	3b04      	subs	r3, #4
 1e8:	60fb      	str	r3, [r7, #12]
		    *pPSP = 0;
 1ea:	68fb      	ldr	r3, [r7, #12]
 1ec:	2200      	movs	r2, #0
 1ee:	601a      	str	r2, [r3, #0]
		for(int j = 0 ; j < 13 ; j++)
 1f0:	687b      	ldr	r3, [r7, #4]
 1f2:	3301      	adds	r3, #1
 1f4:	607b      	str	r3, [r7, #4]
 1f6:	687b      	ldr	r3, [r7, #4]
 1f8:	2b0c      	cmp	r3, #12
 1fa:	ddf3      	ble.n	1e4 <init_tasks_stack+0xb2>

		}

		user_tasks[i].psp_value = (uint32_t)pPSP;
 1fc:	68fa      	ldr	r2, [r7, #12]
 1fe:	4908      	ldr	r1, [pc, #32]	; (220 <init_tasks_stack+0xee>)
 200:	68bb      	ldr	r3, [r7, #8]
 202:	011b      	lsls	r3, r3, #4
 204:	440b      	add	r3, r1
 206:	601a      	str	r2, [r3, #0]
	for(int i = 0 ; i < MAX_TASKS ;i++)
 208:	68bb      	ldr	r3, [r7, #8]
 20a:	3301      	adds	r3, #1
 20c:	60bb      	str	r3, [r7, #8]
 20e:	68bb      	ldr	r3, [r7, #8]
 210:	2b04      	cmp	r3, #4
 212:	ddc4      	ble.n	19e <init_tasks_stack+0x6c>


	}

}
 214:	bf00      	nop
 216:	bf00      	nop
 218:	3714      	adds	r7, #20
 21a:	46bd      	mov	sp, r7
 21c:	bc80      	pop	{r7}
 21e:	4770      	bx	lr
 220:	00000000 	.word	0x00000000
 224:	2001f000 	.word	0x2001f000
 228:	20020000 	.word	0x20020000
 22c:	2001fc00 	.word	0x2001fc00
 230:	2001f800 	.word	0x2001f800
 234:	2001f400 	.word	0x2001f400
	...

0000024c <enable_processor_faults>:

void enable_processor_faults(void)
{
 24c:	b480      	push	{r7}
 24e:	b083      	sub	sp, #12
 250:	af00      	add	r7, sp, #0
	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;
 252:	4b0c      	ldr	r3, [pc, #48]	; (284 <enable_processor_faults+0x38>)
 254:	607b      	str	r3, [r7, #4]

	*pSHCSR |= ( 1 << 16); //mem manage
 256:	687b      	ldr	r3, [r7, #4]
 258:	681b      	ldr	r3, [r3, #0]
 25a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 25e:	687b      	ldr	r3, [r7, #4]
 260:	601a      	str	r2, [r3, #0]
	*pSHCSR |= ( 1 << 17); //bus fault
 262:	687b      	ldr	r3, [r7, #4]
 264:	681b      	ldr	r3, [r3, #0]
 266:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 26a:	687b      	ldr	r3, [r7, #4]
 26c:	601a      	str	r2, [r3, #0]
	*pSHCSR |= ( 1 << 18); //usage fault
 26e:	687b      	ldr	r3, [r7, #4]
 270:	681b      	ldr	r3, [r3, #0]
 272:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 276:	687b      	ldr	r3, [r7, #4]
 278:	601a      	str	r2, [r3, #0]
}
 27a:	bf00      	nop
 27c:	370c      	adds	r7, #12
 27e:	46bd      	mov	sp, r7
 280:	bc80      	pop	{r7}
 282:	4770      	bx	lr
 284:	e000ed24 	.word	0xe000ed24

00000288 <get_psp_value>:


uint32_t get_psp_value(void)
{
 288:	b480      	push	{r7}
 28a:	af00      	add	r7, sp, #0

	return user_tasks[current_task].psp_value;
 28c:	4b04      	ldr	r3, [pc, #16]	; (2a0 <get_psp_value+0x18>)
 28e:	781b      	ldrb	r3, [r3, #0]
 290:	4a04      	ldr	r2, [pc, #16]	; (2a4 <get_psp_value+0x1c>)
 292:	011b      	lsls	r3, r3, #4
 294:	4413      	add	r3, r2
 296:	681b      	ldr	r3, [r3, #0]
}
 298:	4618      	mov	r0, r3
 29a:	46bd      	mov	sp, r7
 29c:	bc80      	pop	{r7}
 29e:	4770      	bx	lr
	...

000002a8 <save_psp_value>:


void save_psp_value(uint32_t current_psp_value)
{
 2a8:	b480      	push	{r7}
 2aa:	b083      	sub	sp, #12
 2ac:	af00      	add	r7, sp, #0
 2ae:	6078      	str	r0, [r7, #4]
	user_tasks[current_task].psp_value = current_psp_value;
 2b0:	4b05      	ldr	r3, [pc, #20]	; (2c8 <save_psp_value+0x20>)
 2b2:	781b      	ldrb	r3, [r3, #0]
 2b4:	4a05      	ldr	r2, [pc, #20]	; (2cc <save_psp_value+0x24>)
 2b6:	011b      	lsls	r3, r3, #4
 2b8:	4413      	add	r3, r2
 2ba:	687a      	ldr	r2, [r7, #4]
 2bc:	601a      	str	r2, [r3, #0]
}
 2be:	bf00      	nop
 2c0:	370c      	adds	r7, #12
 2c2:	46bd      	mov	sp, r7
 2c4:	bc80      	pop	{r7}
 2c6:	4770      	bx	lr
	...

000002d0 <update_next_task>:


void update_next_task(void)
{
 2d0:	b480      	push	{r7}
 2d2:	b083      	sub	sp, #12
 2d4:	af00      	add	r7, sp, #0
	int state = TASK_BLOCKED_STATE;
 2d6:	23ff      	movs	r3, #255	; 0xff
 2d8:	607b      	str	r3, [r7, #4]

	for(int i= 0 ; i < (MAX_TASKS) ; i++)
 2da:	2300      	movs	r3, #0
 2dc:	603b      	str	r3, [r7, #0]
 2de:	e024      	b.n	32a <update_next_task+0x5a>
	{
		current_task++;
 2e0:	4b1a      	ldr	r3, [pc, #104]	; (34c <update_next_task+0x7c>)
 2e2:	781b      	ldrb	r3, [r3, #0]
 2e4:	3301      	adds	r3, #1
 2e6:	b2da      	uxtb	r2, r3
 2e8:	4b18      	ldr	r3, [pc, #96]	; (34c <update_next_task+0x7c>)
 2ea:	701a      	strb	r2, [r3, #0]
	    current_task %= MAX_TASKS;
 2ec:	4b17      	ldr	r3, [pc, #92]	; (34c <update_next_task+0x7c>)
 2ee:	781a      	ldrb	r2, [r3, #0]
 2f0:	4b17      	ldr	r3, [pc, #92]	; (350 <update_next_task+0x80>)
 2f2:	fba3 1302 	umull	r1, r3, r3, r2
 2f6:	0899      	lsrs	r1, r3, #2
 2f8:	460b      	mov	r3, r1
 2fa:	009b      	lsls	r3, r3, #2
 2fc:	440b      	add	r3, r1
 2fe:	1ad3      	subs	r3, r2, r3
 300:	b2da      	uxtb	r2, r3
 302:	4b12      	ldr	r3, [pc, #72]	; (34c <update_next_task+0x7c>)
 304:	701a      	strb	r2, [r3, #0]
		state = user_tasks[current_task].current_state;
 306:	4b11      	ldr	r3, [pc, #68]	; (34c <update_next_task+0x7c>)
 308:	781b      	ldrb	r3, [r3, #0]
 30a:	4a12      	ldr	r2, [pc, #72]	; (354 <update_next_task+0x84>)
 30c:	011b      	lsls	r3, r3, #4
 30e:	4413      	add	r3, r2
 310:	3308      	adds	r3, #8
 312:	781b      	ldrb	r3, [r3, #0]
 314:	607b      	str	r3, [r7, #4]
		if( (state == TASK_READY_STATE) && (current_task != 0) )
 316:	687b      	ldr	r3, [r7, #4]
 318:	2b00      	cmp	r3, #0
 31a:	d103      	bne.n	324 <update_next_task+0x54>
 31c:	4b0b      	ldr	r3, [pc, #44]	; (34c <update_next_task+0x7c>)
 31e:	781b      	ldrb	r3, [r3, #0]
 320:	2b00      	cmp	r3, #0
 322:	d106      	bne.n	332 <update_next_task+0x62>
	for(int i= 0 ; i < (MAX_TASKS) ; i++)
 324:	683b      	ldr	r3, [r7, #0]
 326:	3301      	adds	r3, #1
 328:	603b      	str	r3, [r7, #0]
 32a:	683b      	ldr	r3, [r7, #0]
 32c:	2b04      	cmp	r3, #4
 32e:	ddd7      	ble.n	2e0 <update_next_task+0x10>
 330:	e000      	b.n	334 <update_next_task+0x64>
			break;
 332:	bf00      	nop
	}

	if(state != TASK_READY_STATE)
 334:	687b      	ldr	r3, [r7, #4]
 336:	2b00      	cmp	r3, #0
 338:	d002      	beq.n	340 <update_next_task+0x70>
		current_task = 0;
 33a:	4b04      	ldr	r3, [pc, #16]	; (34c <update_next_task+0x7c>)
 33c:	2200      	movs	r2, #0
 33e:	701a      	strb	r2, [r3, #0]
}
 340:	bf00      	nop
 342:	370c      	adds	r7, #12
 344:	46bd      	mov	sp, r7
 346:	bc80      	pop	{r7}
 348:	4770      	bx	lr
 34a:	bf00      	nop
 34c:	00000000 	.word	0x00000000
 350:	cccccccd 	.word	0xcccccccd
 354:	00000000 	.word	0x00000000

00000358 <switch_sp_to_psp>:
__attribute__((naked)) void switch_sp_to_psp(void)
{
    //1. initialize the PSP with TASK1 stack start address

	//get the value of psp of current_task
	__asm volatile ("PUSH {LR}"); //preserve LR which connects back to main()
 358:	b500      	push	{lr}
	__asm volatile ("BL get_psp_value");
 35a:	f7ff fffe 	bl	288 <get_psp_value>
	__asm volatile ("MSR PSP,R0"); //initialize psp
 35e:	f380 8809 	msr	PSP, r0
	__asm volatile ("POP {LR}");  //pops back LR value
 362:	f85d eb04 	ldr.w	lr, [sp], #4

	//2. change SP to PSP using CONTROL register
	__asm volatile ("MOV R0,#0X02");
 366:	f04f 0002 	mov.w	r0, #2
	__asm volatile ("MSR CONTROL,R0");
 36a:	f380 8814 	msr	CONTROL, r0
	__asm volatile ("BX LR");
 36e:	4770      	bx	lr
}
 370:	bf00      	nop

00000372 <schedule>:


void schedule(void)
{
 372:	b480      	push	{r7}
 374:	b083      	sub	sp, #12
 376:	af00      	add	r7, sp, #0
	//pend the pendsv exception
	uint32_t *pICSR = (uint32_t*)0xE000ED04;
 378:	4b06      	ldr	r3, [pc, #24]	; (394 <schedule+0x22>)
 37a:	607b      	str	r3, [r7, #4]
	*pICSR |= ( 1 << 28);
 37c:	687b      	ldr	r3, [r7, #4]
 37e:	681b      	ldr	r3, [r3, #0]
 380:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 384:	687b      	ldr	r3, [r7, #4]
 386:	601a      	str	r2, [r3, #0]

}
 388:	bf00      	nop
 38a:	370c      	adds	r7, #12
 38c:	46bd      	mov	sp, r7
 38e:	bc80      	pop	{r7}
 390:	4770      	bx	lr
 392:	bf00      	nop
 394:	e000ed04 	.word	0xe000ed04

00000398 <task_delay>:




void task_delay(uint32_t tick_count)
{
 398:	b580      	push	{r7, lr}
 39a:	b082      	sub	sp, #8
 39c:	af00      	add	r7, sp, #0
 39e:	6078      	str	r0, [r7, #4]
	//disable interrupt
	INTERRUPT_DISABLE();
 3a0:	f04f 0001 	mov.w	r0, #1
 3a4:	f380 8810 	msr	PRIMASK, r0

	if(current_task)
 3a8:	4b10      	ldr	r3, [pc, #64]	; (3ec <task_delay+0x54>)
 3aa:	781b      	ldrb	r3, [r3, #0]
 3ac:	2b00      	cmp	r3, #0
 3ae:	d015      	beq.n	3dc <task_delay+0x44>
	{
	   user_tasks[current_task].block_count = g_tick_count + tick_count;
 3b0:	4b0f      	ldr	r3, [pc, #60]	; (3f0 <task_delay+0x58>)
 3b2:	681a      	ldr	r2, [r3, #0]
 3b4:	4b0d      	ldr	r3, [pc, #52]	; (3ec <task_delay+0x54>)
 3b6:	781b      	ldrb	r3, [r3, #0]
 3b8:	4618      	mov	r0, r3
 3ba:	687b      	ldr	r3, [r7, #4]
 3bc:	441a      	add	r2, r3
 3be:	490d      	ldr	r1, [pc, #52]	; (3f4 <task_delay+0x5c>)
 3c0:	0103      	lsls	r3, r0, #4
 3c2:	440b      	add	r3, r1
 3c4:	3304      	adds	r3, #4
 3c6:	601a      	str	r2, [r3, #0]
	   user_tasks[current_task].current_state = TASK_BLOCKED_STATE;
 3c8:	4b08      	ldr	r3, [pc, #32]	; (3ec <task_delay+0x54>)
 3ca:	781b      	ldrb	r3, [r3, #0]
 3cc:	4a09      	ldr	r2, [pc, #36]	; (3f4 <task_delay+0x5c>)
 3ce:	011b      	lsls	r3, r3, #4
 3d0:	4413      	add	r3, r2
 3d2:	3308      	adds	r3, #8
 3d4:	22ff      	movs	r2, #255	; 0xff
 3d6:	701a      	strb	r2, [r3, #0]
	   schedule();
 3d8:	f7ff fffe 	bl	372 <schedule>
	}

	//enable interrupt
	INTERRUPT_ENABLE();
 3dc:	f04f 0000 	mov.w	r0, #0
 3e0:	f380 8810 	msr	PRIMASK, r0
}
 3e4:	bf00      	nop
 3e6:	3708      	adds	r7, #8
 3e8:	46bd      	mov	sp, r7
 3ea:	bd80      	pop	{r7, pc}
	...

000003f8 <PendSV_Handler>:
{

	/*Save the context of current task */

	//1. Get current running task's PSP value
	__asm volatile("MRS R0,PSP");
 3f8:	f3ef 8009 	mrs	r0, PSP
	//2. Using that PSP value store SF2( R4 to R11)
	__asm volatile("STMDB R0!,{R4-R11}");
 3fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	__asm volatile("PUSH {LR}");
 400:	b500      	push	{lr}

	//3. Save the current value of PSP
    __asm volatile("BL save_psp_value");
 402:	f7ff fffe 	bl	2a8 <save_psp_value>


	/*Retrieve the context of next task */

	//1. Decide next task to run
    __asm volatile("BL update_next_task");
 406:	f7ff fffe 	bl	2d0 <update_next_task>

	//2. get its past PSP value
	__asm volatile ("BL get_psp_value");
 40a:	f7ff fffe 	bl	288 <get_psp_value>

	//3. Using that PSP value retrieve SF2(R4 to R11)
	__asm volatile ("LDMIA R0!,{R4-R11}");
 40e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	//4. update PSP and exit
	__asm volatile("MSR PSP,R0");
 412:	f380 8809 	msr	PSP, r0

	__asm volatile("POP {LR}");
 416:	f85d eb04 	ldr.w	lr, [sp], #4

	__asm volatile("BX LR");
 41a:	4770      	bx	lr



}
 41c:	bf00      	nop

0000041e <update_global_tick_count>:


void update_global_tick_count(void)
{
 41e:	b480      	push	{r7}
 420:	af00      	add	r7, sp, #0
	g_tick_count++;
 422:	4b04      	ldr	r3, [pc, #16]	; (434 <update_global_tick_count+0x16>)
 424:	681b      	ldr	r3, [r3, #0]
 426:	3301      	adds	r3, #1
 428:	4a02      	ldr	r2, [pc, #8]	; (434 <update_global_tick_count+0x16>)
 42a:	6013      	str	r3, [r2, #0]
}
 42c:	bf00      	nop
 42e:	46bd      	mov	sp, r7
 430:	bc80      	pop	{r7}
 432:	4770      	bx	lr
 434:	00000000 	.word	0x00000000

00000438 <unblock_tasks>:

void unblock_tasks(void)
{
 438:	b480      	push	{r7}
 43a:	b083      	sub	sp, #12
 43c:	af00      	add	r7, sp, #0
	for(int i = 1 ; i < MAX_TASKS ; i++)
 43e:	2301      	movs	r3, #1
 440:	607b      	str	r3, [r7, #4]
 442:	e01b      	b.n	47c <unblock_tasks+0x44>
	{
		if(user_tasks[i].current_state != TASK_READY_STATE)
 444:	4a12      	ldr	r2, [pc, #72]	; (490 <unblock_tasks+0x58>)
 446:	687b      	ldr	r3, [r7, #4]
 448:	011b      	lsls	r3, r3, #4
 44a:	4413      	add	r3, r2
 44c:	3308      	adds	r3, #8
 44e:	781b      	ldrb	r3, [r3, #0]
 450:	2b00      	cmp	r3, #0
 452:	d010      	beq.n	476 <unblock_tasks+0x3e>
		{
			if(user_tasks[i].block_count == g_tick_count)
 454:	4a0e      	ldr	r2, [pc, #56]	; (490 <unblock_tasks+0x58>)
 456:	687b      	ldr	r3, [r7, #4]
 458:	011b      	lsls	r3, r3, #4
 45a:	4413      	add	r3, r2
 45c:	3304      	adds	r3, #4
 45e:	681a      	ldr	r2, [r3, #0]
 460:	4b0c      	ldr	r3, [pc, #48]	; (494 <unblock_tasks+0x5c>)
 462:	681b      	ldr	r3, [r3, #0]
 464:	429a      	cmp	r2, r3
 466:	d106      	bne.n	476 <unblock_tasks+0x3e>
			{
				user_tasks[i].current_state = TASK_READY_STATE;
 468:	4a09      	ldr	r2, [pc, #36]	; (490 <unblock_tasks+0x58>)
 46a:	687b      	ldr	r3, [r7, #4]
 46c:	011b      	lsls	r3, r3, #4
 46e:	4413      	add	r3, r2
 470:	3308      	adds	r3, #8
 472:	2200      	movs	r2, #0
 474:	701a      	strb	r2, [r3, #0]
	for(int i = 1 ; i < MAX_TASKS ; i++)
 476:	687b      	ldr	r3, [r7, #4]
 478:	3301      	adds	r3, #1
 47a:	607b      	str	r3, [r7, #4]
 47c:	687b      	ldr	r3, [r7, #4]
 47e:	2b04      	cmp	r3, #4
 480:	dde0      	ble.n	444 <unblock_tasks+0xc>
			}
		}

	}

}
 482:	bf00      	nop
 484:	bf00      	nop
 486:	370c      	adds	r7, #12
 488:	46bd      	mov	sp, r7
 48a:	bc80      	pop	{r7}
 48c:	4770      	bx	lr
 48e:	bf00      	nop
	...

00000498 <SysTick_Handler>:


void  SysTick_Handler(void)
{
 498:	b580      	push	{r7, lr}
 49a:	b082      	sub	sp, #8
 49c:	af00      	add	r7, sp, #0

	uint32_t *pICSR = (uint32_t*)0xE000ED04;
 49e:	4b08      	ldr	r3, [pc, #32]	; (4c0 <SysTick_Handler+0x28>)
 4a0:	607b      	str	r3, [r7, #4]

    update_global_tick_count();
 4a2:	f7ff fffe 	bl	41e <update_global_tick_count>

    unblock_tasks();
 4a6:	f7ff fffe 	bl	438 <unblock_tasks>

    //pend the pendsv exception
    *pICSR |= ( 1 << 28);
 4aa:	687b      	ldr	r3, [r7, #4]
 4ac:	681b      	ldr	r3, [r3, #0]
 4ae:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 4b2:	687b      	ldr	r3, [r7, #4]
 4b4:	601a      	str	r2, [r3, #0]
}
 4b6:	bf00      	nop
 4b8:	3708      	adds	r7, #8
 4ba:	46bd      	mov	sp, r7
 4bc:	bd80      	pop	{r7, pc}
 4be:	bf00      	nop
 4c0:	e000ed04 	.word	0xe000ed04

000004c4 <HardFault_Handler>:

//2. implement the fault handlers
void HardFault_Handler(void)
{
 4c4:	b580      	push	{r7, lr}
 4c6:	af00      	add	r7, sp, #0
	printf("Exception : Hardfault\n");
 4c8:	4801      	ldr	r0, [pc, #4]	; (4d0 <HardFault_Handler+0xc>)
 4ca:	f7ff fffe 	bl	0 <puts>
	while(1);
 4ce:	e7fe      	b.n	4ce <HardFault_Handler+0xa>
 4d0:	00000000 	.word	0x00000000

000004d4 <MemManage_Handler>:
}


void MemManage_Handler(void)
{
 4d4:	b580      	push	{r7, lr}
 4d6:	af00      	add	r7, sp, #0
	printf("Exception : MemManage\n");
 4d8:	4801      	ldr	r0, [pc, #4]	; (4e0 <MemManage_Handler+0xc>)
 4da:	f7ff fffe 	bl	0 <puts>
	while(1);
 4de:	e7fe      	b.n	4de <MemManage_Handler+0xa>
 4e0:	00000018 	.word	0x00000018

000004e4 <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 4e4:	b580      	push	{r7, lr}
 4e6:	af00      	add	r7, sp, #0
	printf("Exception : BusFault\n");
 4e8:	4801      	ldr	r0, [pc, #4]	; (4f0 <BusFault_Handler+0xc>)
 4ea:	f7ff fffe 	bl	0 <puts>
	while(1);
 4ee:	e7fe      	b.n	4ee <BusFault_Handler+0xa>
 4f0:	00000030 	.word	0x00000030
